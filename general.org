* General Emacs Config
General config, this serves as a base to build upon using the modules in the module folder.
** Theming & Aesthetics
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
     :ensure t)
     
  (load-theme 'gruvbox t)
#+END_SRC

*** Hide Scrollbar, Menubar, Titlebar & Toolbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t)
  (doom-modeline-mode 1)
#+END_SRC

#+RESULTS:
: t

*** All The Icons
**** General
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons 
    :ensure t)
#+END_SRC

**** Dired
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired 
    :ensure t)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

**** Ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ibuffer
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))
#+END_SRC

** User Interface
*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)
                          (agenda . 5)))
  
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
#+END_SRC

*** Helm
Copied from matman26
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
      (require 'helm-config)
      (setq helm-split-window-in-side-p t
            helm-move-to-line-cycle-in-source t)
    :config 
      (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
      (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
      (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
      (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
      (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
      (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
      (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
      (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
      (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
    :ensure t)
#+END_SRC

** Evil (Vi emulation)
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil
	  :ensure t)
  (evil-mode 1)

  (use-package evil-tutor 
       :ensure t)

  (use-package evil-collection 
       :ensure t)

  (evil-collection-init)
#+END_SRC

** Minor useful packages, Custom bindings & Tweaks
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key 
     :ensure t)
  (which-key-mode)
#+END_SRC

*** Backup settings
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
       `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC

*** Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile 
     :ensure t
     :config
     (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
     (projectile-mode +1))

  (use-package helm-projectile 
     :ensure t
     :config (helm-projectile-on))

   
     (bind-key "C-1" 'projectile-find-file)
#+END_SRC
