* General Emacs Config
General config, this serves as a base to build upon using the modules in the module folder.
** User Interface, Theming & Aesthetics
*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
#+END_SRC

*** Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode))
#+END_SRC

#+RESULTS:

*** Telephone line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t)

  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  (setq telephone-line-height 24
        telephone-line-evil-use-short-tag t)

  (telephone-line-mode 1)
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes 
     :ensure t)
  (load-theme 'doom-gruvbox t)
#+END_SRC

*** Hide Scrollbar, Menubar, Titlebar & Toolbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) 
  (setq ns-use-proxy-icon nil)
  (setq default-frame-alist '((undecorated . t)))
#+END_SRC

*** All The Icons
**** General
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons 
    :ensure t)

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))

  (use-package all-the-icons-dired 
    :ensure t)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (use-package all-the-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+END_SRC

#+RESULTS:
| all-the-icons-ibuffer-mode |

** Evil (Vi emulation)
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil
	  :ensure t)
  (evil-mode 1)

  (use-package evil-tutor 
       :ensure t)

  (use-package evil-collection 
       :ensure t)

  (evil-collection-init)
#+END_SRC

** Minor useful packages, Custom bindings & Tweaks
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key 
     :ensure t)
  (which-key-mode)
#+END_SRC

*** Backup settings
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
       `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC

*** No littering
**** Package
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
     :ensure t)
#+END_SRC

**** Custom bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-c e") 'org-edit-src-code)
#+END_SRC

*** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree 
       :ensure t)
#+END_SRC

*** Restart Emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+END_SRC

** Perspective
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t  ; use `:straight t` if using straight.el!
    :bind ("C-x k" . persp-kill-buffer*)
    :bind ("C-x p" . persp-switch)
    :custom (persp-mode-prefix-key (kbd "C-x m"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+END_SRC

** Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC

