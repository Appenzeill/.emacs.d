* General Emacs Config
General config, this serves as a base to build upon using the modules in the module folder.
** User Interface, Theming & Aesthetics
*** Dashboard
Add a fancy dashboard to the startup screen.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
#+END_SRC

*** Vertico
Minimal completion UI.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous)
		("C-f" . vertico-exit)
		:map minibuffer-local-map
		("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode))
#+END_SRC

Center the vertico frame in the middle of Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package vertico-posframe
    :ensure t
    :init
    (vertico-posframe-mode))
#+END_SRC

*** Theme
**** Doom Themes
Use Gruvbox as the theme for the editor.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes 
     :ensure t)
  (load-theme 'doom-gruvbox t)
#+END_SRC

**** Automatic Theme and Font
#+BEGIN_SRC emacs-lisp
  (use-package auto-dark
    :ensure t
    :custom
    (auto-dark-themes '((doom-gruvbox) (doom-gruvbox-light)))

    :hook
    (auto-dark-dark-mode
     . (lambda ()
	 ;; something to execute when dark mode is detected
	 (vertico-posframe-cleanup)
	 ))
    (auto-dark-light-mode
     . (lambda ()
	 ;; something to execute when dark mode is detected
	 (vertico-posframe-cleanup)
	 ))
    :init (auto-dark-mode))
#+END_SRC

*** Font
Use Iosevka as the font for Emacs.
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'default-frame-alist '(font . "Iosevka Fixed" ))
  ;; (set-face-attribute 'default t :font "Iosevka Fixed" )
#+END_SRC

#+RESULTS:

*** Hide Scrollbar, Menubar, Titlebar & Toolbar
Hide UI elements to create a cleaner UI.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) 
  (setq ns-use-proxy-icon nil)
  (setq default-frame-alist '((undecorated . t)))

  (add-to-list 'default-frame-alist
             '(vertical-scroll-bars . nil))
#+END_SRC

*** All The Icons
Improve visuals by adding icons.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons 
    :ensure t)
  
  (use-package all-the-icons-dired 
    :ensure t)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (use-package all-the-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+END_SRC

*** Org Modern
use the org-modern package to improve the visual look of org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
	    :ensure t)
  (global-org-modern-mode)
#+END_SRC

Add some padding to all frames.
*** Padding
#+BEGIN_SRC emacs-lisp
  (use-package spacious-padding
	    :ensure t)
  (spacious-padding-mode t)
#+END_SRC

** Evil (Vi emulation)
Add Vim keybinds.
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil
	  :ensure t)
  (evil-mode 1)

  (use-package evil-tutor 
       :ensure t)

  (use-package evil-collection 
       :ensure t)

  (evil-collection-init)
#+END_SRC

** Minor useful packages, Custom bindings & Tweaks
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key 
     :ensure t)
  (which-key-mode)
#+END_SRC

*** Backup settings
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
       `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC

*** No littering
**** Package
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
     :ensure t)
#+END_SRC

**** Custom bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-c e") 'org-edit-src-code)
#+END_SRC

*** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree 
       :ensure t)
#+END_SRC

*** Restart Emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+END_SRC

** Perspective
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t  ; use `:straight t` if using straight.el!
    :bind ("C-x k" . persp-kill-buffer*)
    :bind ("C-x p" . persp-switch)
    :custom (persp-mode-prefix-key (kbd "C-x m"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+END_SRC

** Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC

** Superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+END_SRC

