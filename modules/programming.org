* Programming
** LSP
*** General LSP configuration
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
   :commands lsp
   :config
   (progn
     (add-hook 'prog-mode-hook #'lsp)
     (lsp-register-client
      (make-lsp-client :new-connection (lsp-tramp-connection
                                        "clangd")
                       :major-modes '(c-mode c++-mode)
                       :remote? t
                       :server-id 'clangd-remote))))

   (setq lsp-headerline-breadcrumb-enable nil)
   (setq lsp-ui-doc-enable nil)
   (add-hook 'c++-mode-hook 'lsp)
#+END_SRC

LSP configuratie, clangd-10 is voor de Lubuntu VM van HU.

*** LSP UI Tweaks 
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :ensure t)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-ui-doc-enable nil)
#+END_SRC

** Languages
*** Python
Install the LSP server for python.
#+BEGIN_SRC bash
  pip install 'python-lsp-server[all]'
#+END_SRC

*** Rust
Simple bash commands to install needed dependicies.
#+BEGIN_SRC bash
  rustup component add rust-src 
  rustup +nightly component add rust-analyzer-preview
#+END_SRC

Simple minimal setup for Rust mode.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC

*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

*** C++
#+BEGIN_SRC emacs-lisp
  (defun my-c++-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0))
  (add-hook 'c++-mode-hook 'my-c++-mode-hook)
#+END_SRC

** Assisting Modes & packages
*** Company Mode
#+begin_src emacs-lisp
  (use-package company 
     :ensure t)
     
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

*** Dap Mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t)
#+END_SRC

*** Smart Paran
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
   :ensure t)
  (add-hook 'prog-mode-hook #'smartparens-mode)
  (add-hook 'org-mode-hook #'smartparens-mode)
#+END_SRC

*** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
     :ensure t)
     
  (setq yas-snippet-dirs
     '("~/.emacs.d/snippets"))
  
  (yas-global-mode 1)
  (yas-reload-all)
  (add-hook 'yas-minor-mode-hook (lambda ()
  (yas-activate-extra-mode 'fundamental-mode)))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** Version Control
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
     :ensure t)
#+END_SRC
