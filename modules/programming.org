* Programming
** Company Mode
#+begin_src emacs-lisp
  (use-package company 
     :ensure t)
     
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src
** Dap Mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t)
#+END_SRC

#+RESULTS:

** Version Control
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
     :ensure t)
#+END_SRC

** Languages
*** Python
Install the LSP server for python.
#+BEGIN_SRC bash
  pip install 'python-lsp-server[all]'
#+END_SRC

*** Rust
Simple bash commands to install needed dependicies.
#+BEGIN_SRC bash
  rustup component add rust-src 
  rustup +nightly component add rust-analyzer-preview
#+END_SRC

Simple minimal setup for Rust mode.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC

*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

*** C++
#+BEGIN_SRC emacs-lisp
  (defun my-c++-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0))
  (add-hook 'c++-mode-hook 'my-c++-mode-hook)
#+END_SRC

** LSP
*** General LSP configuration
LSP configuratie, clangd-10 is voor de Lubuntu VM van HU.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm user
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; optional if you want which-key integration
  (use-package which-key
      :config
      (which-key-mode))
#+END_SRC

*** LSP UI Tweaks 
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui :commands lsp-ui-mode)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-ui-doc-enable nil)
#+END_SRC

** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
     :ensure t)
     
  (setq yas-snippet-dirs
     '("~/.emacs.d/snippets"))
  
  (yas-global-mode 1)
  (yas-reload-all)
  (add-hook 'yas-minor-mode-hook (lambda ()
  (yas-activate-extra-mode 'fundamental-mode)))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** Smart Paran
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
   :ensure t)
  (add-hook 'prog-mode-hook #'smartparens-mode)
  (add-hook 'org-mode-hook #'smartparens-mode)
#+END_SRC

** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :ensure t)
#+END_SRC

** Jupyter notebook
#+BEGIN_SRC emacs-lisp
  (use-package jupyter
    :ensure t)
#+END_SRC
