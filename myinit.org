#+STARTUP: overview 
* Interface Tweaks
** Startup, general settings & packages
*** Scrollbar, Menubar & Toolbar
#+BEGIN_SRC emacs-lisp
;; Hide Scroll bar,menu bar, tool bar
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

#+END_SRC

#+RESULTS:

*** Page numbering
#+BEGIN_SRC emacs-lisp
;; Page numbering
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)

#+END_SRC

#+RESULTS:
: relative

*** Helm
#+BEGIN_SRC emacs-lisp
;; Helm
;; Copied from matman26
(use-package helm
  :init
    (require 'helm-config)
    (setq helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t)
  :config 
    (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
    (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
    (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
    (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
    (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
    (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
    (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
    (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
    (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
    (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
  :ensure t)
#+END_SRC

#+RESULTS:
: t

*** Eshell
#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
  (interactive)
  (if (get-buffer "*eshell*")
  (kill-buffer-and-window)
   (let* ((height (/ (window-total-height) 3)))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (insert (concat "ls"))
    (eshell-send-input))))
  (bind-key "C-`" 'eshell-here)
#+END_SRC

#+RESULTS:
: eshell-here

*** Company mode
#+BEGIN_SRC emacs-lisp
;; Company mode
(use-package company 
   :ensure t)

#+END_SRC

#+RESULTS:

*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile 
   :ensure t
   :config
   (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
   (projectile-mode +1))

(use-package helm-projectile 
   :ensure t
   :config (helm-projectile-on))

   
   (bind-key "C-1" 'projectile-find-file)

#+END_SRC

#+RESULTS:
: projectile-find-file
*** Which key
#+BEGIN_SRC emacs-lisp
;; Which key
(use-package which-key 
   :ensure t)
(which-key-mode)
#+END_SRC

#+RESULTS:
: t
*** Evil
#+BEGIN_SRC emacs-lisp
;; evil tutor 
(use-package evil-tutor 
   :ensure t)
(which-key-mode)
#+END_SRC

#+RESULTS:
: t

*** Autopair
#+BEGIN_SRC emacs-lisp
;; autopair 
(use-package autopair 
   :ensure t)
(autopair-global-mode 1)
(which-key-mode)
#+END_SRC

#+RESULTS:
: t

** Theming, Ricing & Aesthethics
*** Theme & Font sizes
#+BEGIN_SRC emacs-lisp
(use-package poet-theme 
   :config 
  (load-theme 'poet-dark t)
   :ensure t)
   
;; Set default font
(set-face-attribute 'default nil
                    :family "Iosevka"
                    :height 100
                    :weight 'normal
                    :width 'normal)

#+END_SRC

#+RESULTS:
*** Dashboard
#+BEGIN_SRC emacs-lisp
;; Fancy Dashboard
(use-package dashboard
:ensure t
:config
(dashboard-setup-startup-hook))

(setq dashboard-items '((recents  . 5)
                        (projects . 5)
                        (bookmarks . 5)
                        (agenda . 5)))
                        
;; Emacs CliÃ«nt 
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
#+RESULTS:
: t

** Programming, Scripting & Markup Langugages
*** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode :ensure t)
#+END_SRC

#+RESULTS:

*** Magit
#+BEGIN_SRC emacs-lisp
;; Magit 
(use-package magit
   :ensure t)
   
;; Evil Magit   
(use-package evil-magit
   :ensure t)
   
#+END_SRC

#+RESULTS:

*** Common Tools
#+BEGIN_SRC emacs-lisp
;; Rust major mode
(use-package yasnippet
   :ensure t)
   
(setq yas-snippet-dirs
      '("~/Snippets/Org" ;; Personal Org snippets
        "/Snippets/Rust" ;; the yasmate collection
        ))

(yas-global-mode 1)
(yas-reload-all)
(add-hook 'yas-minor-mode-hook (lambda ()
(yas-activate-extra-mode 'fundamental-mode)))
#+END_SRC

#+RESULTS:
| (lambda nil (yas-activate-extra-mode 'fundamental-mode)) | yas-minor-mode-set-explicitly |

*** Rust
#+BEGIN_SRC emacs-lisp
;; Rust major mode
(use-package rust-mode 
   :ensure t)
 
;; Racer 
(use-package racer 
   :ensure t)

(setq racer-cmd "~/.cargo/bin/racer") ;; Rustup binaries PATH
(setq racer-rust-src-path "/home/daan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src") ;; Rust source code PATH

(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)
(add-hook 'racer-mode-hook #'company-mode)

(require 'rust-mode)
(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)

;; Cargo minor mode
(use-package cargo 
   :ensure t)
(add-hook 'rust-mode-hook 'cargo-minor-mode)

;; Eshell automaticly compiles project

#+END_SRC

#+RESULTS:
| cargo-minor-mode | racer-mode |
*** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+END_SRC

*** Dart & Flutter
#+BEGIN_SRC emacs-lisp
(use-package dart-mode
  :ensure t)

(use-package lsp-dart
  :ensure t
  :hook (dart-mode . lsp))
  
#+END_SRC

#+RESULTS:
| lsp |

*** Navigation
#+BEGIN_SRC emacs-lisp
;; dumb-jump
(use-package dumb-jump
   :ensure t)

(setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
(add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t)


#+END_SRC

#+RESULTS:
| dumb-jump-xref-activate |

** Literate
*** Org
#+BEGIN_SRC emacs-lisp
;; org-superstar
(use-package org-superstar  ;; Improved version of org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
  
;; Org Bullet title sizes
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.15))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
)
(setq org-plantuml-jar-path (expand-file-name "/home/daan/Emacs External Files/plantuml.jar"))

;; personal tweaks
(setq org-startup-indented t)             ;; Indent according to section
(setq org-startup-with-inline-images t)   ;; Display images in-buffer by default
(setq org-indent-indentation-per-level 1)



(org-babel-do-load-languages 'org-babel-load-languages
                              '(
                              (python . t)
                              (plantuml . t)
                              (latex . t)
))


;; inside .emacs file
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
        

;; Evil-org
(use-package evil-org
  :ensure t
  :after (evil org)
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

#+RESULTS:
: t

*** Org + LaTeX skeletons
**** LaTeX skeleton
#+BEGIN_SRC emacs-lisp
(define-skeleton latex-skeleton
"Skeleton for article type latex documents"
"Preamble:"
"\\documentclass{article}\n"
"\\usepackage[utf8]{inputenc}\n"
"\\usepackage[margin=1 in]{geometry}\n"
"\\usepackage{graphicx}\n"
"\\setlength{\\parindent}{4em}\n"
"\\setlength{\\parskip}{1em}\n"
"\\renewcommand{\\baselinestretch}{1.5}\n\n"
"\\author{Daan Roth}\n"
"\\title{"_"}\n"
"\\date{\\today}\n\n"
"\\begin{document}\n"
"\\maketitle\n\n"
"\\end{document}\n")
#+END_SRC
**** LaTeX article skeleton
#+BEGIN_SRC emacs-lisp
(define-skeleton org-latex-article
"Skeleton for articles "
"Preamble:"
"#+STARTUP: showeverything\n"
"#+TITLE: TITLE\n"
"#+AUTHOR: Daan Roth\n"
"#+DATE: \\today\n"
"#+LATEX_CLASS: article\n"
"#+LATEX_CLASS_OPTIONS: [a4paper]\n"
"#+LATEX_HEADER: \\input{/home/daan/Nextcloud/LaTeX/articleheader.tex}\n"
"#+STARTUP: showeverything\n"
"#+OPTIONS: toc:nil\n")
#+END_SRC

#+RESULTS:
: org-latex-article

*** PlantUML
#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
   :ensure t)

#+END_SRC

#+RESULTS:

*** Flyspell
#+BEGIN_SRC emacs-lisp
      (defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "nederlands") "english" "nederlands")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
    
      (global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+END_SRC

#+RESULTS:
: fd-switch-dictionary

*** PDF Tools
#+begin_src emacs-lisp :results output
(use-package pdf-tools
   :ensure t)
#+end_src



